import { CurlUIElementProps } from "curlui/dist/types";
export declare function RxAccessibility(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxActivityLog(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxAlignBaseline(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxAlignBottom(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxAlignCenterHorizontally(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxAlignCenterVertically(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxAlignLeft(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxAlignRight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxAlignTop(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxAllSides(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxAngle(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxArchive(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxArrowBottomLeft(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxArrowBottomRight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxArrowDown(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxArrowLeft(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxArrowRight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxArrowTopLeft(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxArrowTopRight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxArrowUp(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxAspectRatio(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxAvatar(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBackpack(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBadge(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBarChart(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBell(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBlendingMode(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBookmarkFilled(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBookmark(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBorderAll(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBorderBottom(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBorderDashed(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBorderDotted(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBorderLeft(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBorderNone(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBorderRight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBorderSolid(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBorderSplit(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBorderStyle(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBorderTop(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBorderWidth(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBoxModel(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxBox(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxButton(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCalendar(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCamera(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCardStackMinus(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCardStackPlus(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCardStack(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCaretDown(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCaretLeft(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCaretRight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCaretSort(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCaretUp(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxChatBubble(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCheckCircled(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCheck(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCheckbox(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxChevronDown(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxChevronLeft(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxChevronRight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxChevronUp(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCircleBackslash(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCircle(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxClipboardCopy(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxClipboard(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxClock(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCode(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCodesandboxLogo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxColorWheel(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxColumnSpacing(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxColumns(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCommit(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxComponent1(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxComponent2(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxComponentBoolean(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxComponentInstance(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxComponentNone(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxComponentPlaceholder(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxContainer(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCookie(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCopy(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCornerBottomLeft(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCornerBottomRight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCornerTopLeft(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCornerTopRight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCorners(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCountdownTimer(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCounterClockwiseClock(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCrop(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCross1(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCross2(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCrossCircled(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCrosshair1(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCrosshair2(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCrumpledPaper(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCube(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCursorArrow(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxCursorText(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDash(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDashboard(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDesktop(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDimensions(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDisc(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDiscordLogo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDividerHorizontal(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDividerVertical(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDotFilled(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDot(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDotsHorizontal(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDotsVertical(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDoubleArrowDown(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDoubleArrowLeft(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDoubleArrowRight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDoubleArrowUp(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDownload(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDragHandleDots1(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDragHandleDots2(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDragHandleHorizontal(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDragHandleVertical(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDrawingPinFilled(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDrawingPin(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxDropdownMenu(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxEnterFullScreen(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxEnter(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxEnvelopeClosed(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxEnvelopeOpen(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxEraser(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxExclamationTriangle(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxExitFullScreen(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxExit(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxExternalLink(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxEyeClosed(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxEyeNone(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxEyeOpen(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxFace(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxFigmaLogo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxFileMinus(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxFilePlus(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxFileText(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxFile(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxFontBold(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxFontFamily(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxFontItalic(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxFontRoman(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxFontSize(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxFontStyle(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxFrame(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxFramerLogo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxGear(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxGithubLogo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxGlobe(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxGrid(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxGroup(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxHalf1(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxHalf2(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxHamburgerMenu(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxHand(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxHeading(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxHeartFilled(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxHeart(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxHeight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxHobbyKnife(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxHome(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxIconjarLogo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxIdCard(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxImage(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxInfoCircled(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxInput(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxInstagramLogo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxKeyboard(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLapTimer(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLaptop(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLayers(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLayout(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLetterCaseCapitalize(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLetterCaseLowercase(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLetterCaseToggle(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLetterCaseUppercase(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLetterSpacing(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLightningBolt(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLineHeight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLink1(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLink2(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLinkBreak1(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLinkBreak2(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLinkNone1(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLinkNone2(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLinkedinLogo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxListBullet(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLockClosed(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLockOpen1(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLockOpen2(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxLoop(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxMagicWand(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxMagnifyingGlass(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxMargin(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxMaskOff(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxMaskOn(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxMinusCircled(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxMinus(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxMix(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxMixerHorizontal(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxMixerVertical(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxMobile(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxModulzLogo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxMoon(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxMove(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxNotionLogo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxOpacity(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxOpenInNewWindow(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxOverline(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPadding(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPaperPlane(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPause(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPencil1(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPencil2(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPerson(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPieChart(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPilcrow(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPinBottom(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPinLeft(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPinRight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPinTop(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPlay(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPlusCircled(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxPlus(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxQuestionMarkCircled(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxQuestionMark(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxQuote(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxRadiobutton(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxReader(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxReload(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxReset(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxResume(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxRocket(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxRotateCounterClockwise(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxRowSpacing(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxRows(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxRulerHorizontal(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxRulerSquare(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxScissors(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSection(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSewingPinFilled(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSewingPin(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxShadowInner(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxShadowNone(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxShadowOuter(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxShadow(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxShare1(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxShare2(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxShuffle(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSize(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSketchLogo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSlash(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSlider(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSpaceBetweenHorizontally(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSpaceBetweenVertically(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSpaceEvenlyHorizontally(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSpaceEvenlyVertically(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSpeakerLoud(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSpeakerModerate(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSpeakerOff(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSpeakerQuiet(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSquare(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxStack(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxStarFilled(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxStar(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxStitchesLogo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxStop(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxStopwatch(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxStretchHorizontally(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxStretchVertically(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxStrikethrough(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSun(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSwitch(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxSymbol(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTable(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTarget(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTextAlignBottom(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTextAlignCenter(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTextAlignJustify(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTextAlignLeft(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTextAlignMiddle(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTextAlignRight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTextAlignTop(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTextNone(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxText(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxThickArrowDown(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxThickArrowLeft(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxThickArrowRight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxThickArrowUp(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTimer(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTokens(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTrackNext(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTrackPrevious(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTransform(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTransparencyGrid(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTrash(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTriangleDown(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTriangleLeft(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTriangleRight(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTriangleUp(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxTwitterLogo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxUnderline(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxUpdate(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxUpload(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxValueNone(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxValue(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxVercelLogo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxVideo(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxViewGrid(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxViewHorizontal(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxViewNone(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxViewVertical(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxWidth(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxZoomIn(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
export declare function RxZoomOut(props: CurlUIElementProps): import("curlui/dist/types").CurlUIRenderElement;
